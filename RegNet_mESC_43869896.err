/cache/home/mm2595/RegNet/regnet/preprocessing/data_loader.py:77: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  edge_index=torch.tensor(edge_index, dtype=torch.long),
/cache/home/mm2595/RegNet/regnet/preprocessing/data_loader.py:78: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  edge_attr=torch.tensor(edge_weights, dtype=torch.float)
/home/mm2595/miniconda3/envs/RegNet_env/lib/python3.10/site-packages/torch_geometric/sampler/neighbor_sampler.py:61: UserWarning: Using 'NeighborSampler' without a 'pyg-lib' installation is deprecated and will be removed soon. Please install 'pyg-lib' for accelerated neighborhood sampling
  warnings.warn(f"Using '{self.__class__.__name__}' without a "
/cache/home/mm2595/RegNet/regnet/training/loss_functions.py:54: UserWarning: Using a target size (torch.Size([1074, 421])) that is different to the input size (torch.Size([1074, 128])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(x_recon, x)
Traceback (most recent call last):
  File "/home/mm2595/miniconda3/envs/RegNet_env/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/home/mm2595/miniconda3/envs/RegNet_env/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
  File "/cache/home/mm2595/RegNet/regnet/training/pretrain.py", line 235, in <module>
    main()
  File "/cache/home/mm2595/RegNet/regnet/training/pretrain.py", line 210, in main
    loss, aupr, auroc = train_epoch(
  File "/cache/home/mm2595/RegNet/regnet/training/pretrain.py", line 97, in train_epoch
    recon_loss = vae_reconstruction_loss(model, data.x, data.edge_index) * recon_weight
  File "/cache/home/mm2595/RegNet/regnet/training/loss_functions.py", line 54, in vae_reconstruction_loss
    return F.mse_loss(x_recon, x)
  File "/home/mm2595/miniconda3/envs/RegNet_env/lib/python3.10/site-packages/torch/nn/functional.py", line 3791, in mse_loss
    expanded_input, expanded_target = torch.broadcast_tensors(input, target)
  File "/home/mm2595/miniconda3/envs/RegNet_env/lib/python3.10/site-packages/torch/functional.py", line 76, in broadcast_tensors
    return _VF.broadcast_tensors(tensors)  # type: ignore[attr-defined]
RuntimeError: The size of tensor a (128) must match the size of tensor b (421) at non-singleton dimension 1
