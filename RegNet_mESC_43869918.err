/cache/home/mm2595/RegNet/regnet/preprocessing/data_loader.py:77: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  edge_index=torch.tensor(edge_index, dtype=torch.long),
/cache/home/mm2595/RegNet/regnet/preprocessing/data_loader.py:78: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  edge_attr=torch.tensor(edge_weights, dtype=torch.float)
/home/mm2595/miniconda3/envs/RegNet_env/lib/python3.10/site-packages/torch_geometric/sampler/neighbor_sampler.py:61: UserWarning: Using 'NeighborSampler' without a 'pyg-lib' installation is deprecated and will be removed soon. Please install 'pyg-lib' for accelerated neighborhood sampling
  warnings.warn(f"Using '{self.__class__.__name__}' without a "
/cache/home/mm2595/RegNet/regnet/training/evaluation.py:184: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(args.model_path, map_location=args.device))
Traceback (most recent call last):
  File "/home/mm2595/miniconda3/envs/RegNet_env/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/home/mm2595/miniconda3/envs/RegNet_env/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
  File "/cache/home/mm2595/RegNet/regnet/training/evaluation.py", line 216, in <module>
    main() 
  File "/cache/home/mm2595/RegNet/regnet/training/evaluation.py", line 211, in main
    save_predictions(preds, labels, variances, gene_names, edge_index, args.output_dir)
  File "/cache/home/mm2595/RegNet/regnet/training/evaluation.py", line 144, in save_predictions
    df = pd.DataFrame({
  File "/home/mm2595/miniconda3/envs/RegNet_env/lib/python3.10/site-packages/pandas/core/frame.py", line 778, in __init__
    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)
  File "/home/mm2595/miniconda3/envs/RegNet_env/lib/python3.10/site-packages/pandas/core/internals/construction.py", line 503, in dict_to_mgr
    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)
  File "/home/mm2595/miniconda3/envs/RegNet_env/lib/python3.10/site-packages/pandas/core/internals/construction.py", line 114, in arrays_to_mgr
    index = _extract_index(arrays)
  File "/home/mm2595/miniconda3/envs/RegNet_env/lib/python3.10/site-packages/pandas/core/internals/construction.py", line 677, in _extract_index
    raise ValueError("All arrays must be of the same length")
ValueError: All arrays must be of the same length
